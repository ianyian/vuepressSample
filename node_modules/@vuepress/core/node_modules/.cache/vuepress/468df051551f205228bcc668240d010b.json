{"remainingRequest":"C:\\GitRepos\\testing1234\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\GitRepos\\testing1234\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\GitRepos\\testing1234\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\GitRepos\\testing1234\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!C:\\GitRepos\\testing1234\\docs\\best-practices\\estimation\\README.md?vue&type=template&id=7d59e515&","dependencies":[{"path":"C:\\GitRepos\\testing1234\\docs\\best-practices\\estimation\\README.md","mtime":1624025589100},{"path":"C:\\GitRepos\\testing1234\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitRepos\\testing1234\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\GitRepos\\testing1234\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitRepos\\testing1234\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\GitRepos\\testing1234\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}