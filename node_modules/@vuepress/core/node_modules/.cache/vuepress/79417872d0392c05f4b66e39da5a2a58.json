{"remainingRequest":"C:\\GitRepos\\testing1234\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\GitRepos\\testing1234\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\GitRepos\\testing1234\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\GitRepos\\testing1234\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!C:\\GitRepos\\testing1234\\docs\\application-security\\certificate-requests\\snc-request-ticket.md?vue&type=template&id=fe50b9d6&","dependencies":[{"path":"C:\\GitRepos\\testing1234\\docs\\application-security\\certificate-requests\\snc-request-ticket.md","mtime":1624025589093},{"path":"C:\\GitRepos\\testing1234\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitRepos\\testing1234\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\GitRepos\\testing1234\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitRepos\\testing1234\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\GitRepos\\testing1234\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJzZXJ2aWNlLW5vdy10aWNrZXQtZ2VuZXJhdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc2VydmljZS1ub3ctdGlja2V0LWdlbmVyYXRpb24iIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTZXJ2aWNlIE5vdyBUaWNrZXQgR2VuZXJhdGlvbiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkluIG9yZGVyIGZvciB5b3UgdG8gc3VjY2Vzc2Z1bGx5IGNvbXBsZXRlIHRoZSBTTkMgcmVxdWVzdCB0aWNrZXQgeW91IG5lZWQgdGhlIENTUiBmaWxlIGdlbmVyYXRlZCBwcmV2aW91c2x5LCB0aGVyZWZvcmUgaWYgeW91IGhhdmVuJ3QgY3JlYXRlZCB0aGUgQ1NSIHBsZWFzZSByZWZlciB0byAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJzdHJvbmciLAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgdG86CiAgICAgICAgICAgICAgICAgICAgIi9hcHBsaWNhdGlvbi1zZWN1cml0eS9jZXJ0aWZpY2F0ZS1yZXF1ZXN0cy9jc3ItZ2VuZXJhdGlvbi5odG1sIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiQ1NSIEdlbmVyYXRpb24gZG9jdW1lbnQiKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIllvdSB3aWxsIG5lZWQgdG8gc3BlY2lmeSBhbmQgZW1haWwgZGlzdHJpYnV0aW9uIGxpc3QgdGhhdCBpcyBhbGxvd2VkIHRvIHJlY2VpdmVkIGVtYWlscyBmcm9tIG91dHNpZGUgb2YgZmxleCAoYnkgZGVmYXVsdCB0aG9zZSBkaXN0cmlidXRpb24gbGlzdHMgYXJlIG9ubHkgdmlzaWJsZSBpbnRlcm5hbGx5KS4gRm9sbG93ICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAiL2FwcGxpY2F0aW9uLXNlY3VyaXR5L2NlcnRpZmljYXRlLXJlcXVlc3RzL2V4dGVybmFsLWVtYWlscy5odG1sIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigidGhpcyBwcm9jZWR1cmUiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgdG8gYWxsb3cgeW91ciBlbWFpbCBkaXN0cmlidXRpb24gbGlzdCB0byByZWNlaXZlIGVtYWlscyBmcm9tIG91dHNpZGUuIgogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIk9uY2UgeW91IGhhdmUgdGhlIFJFUSBmaWxlLCB5b3UgZ28gdG8gU05DLCBDZXJ0aWZpY2F0ZSBSZXF1ZXN0IGNhdGFsb2cgYW5kIGNyZWF0ZSBhIHRpY2tldCBmb3IgdGhpcywgdXNpbmcgdGhlIGZvbGxvd2luZyBvcHRpb25zOiIKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiSW4gdGhlIHJlcXVlc3QgZm9ybSBmaWxsIGF0IGJsYW5rcyBhcyBmb2xsb3dzLCBjb3B5IENTUiBjb250ZW50IGZyb20gZmlsZSBhbmQgbWFrZSBzdXJlIHlvdSBkbyBub3QgYWRkIGFueSBzcGFjZSBhdCB0aGUgZW5kLiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgem9vbTogIjc1JSIgfSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWFnZXMvU05DX1JlcXVlc3RfMS5wbmciKSwKICAgICAgICAgICAgICAgICAgYWx0OiAiU05DX1JlcXVlc3RfMSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIkluIFN1YmplY3QgQWx0ZXJuYXRpdmUgTmFtZXMgeW91IG11c3Qgc2VwYXJhdGUgdGhlIGRpZmZlcmVudCBuYW1lcyBieSAnLCcgKGNvbW1hKToiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB6b29tOiAiNzUlIiB9LAogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWFnZXMvU05DX1JlcXVlc3RfMi5wbmciKSwKICAgICAgICAgICAgICBhbHQ6ICJTTkNfUmVxdWVzdF8yIgogICAgICAgICAgICB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICJTZWxlY3QgdGhlIHRlYW0gZW1haWwgYWRkcmVzc2VzIHRoYXQgd2lsbCByZWNlaXZlIGNlcnRpZmljYXRlIGluc3RhbGxhdGlvbiBsaW5rcy4gTWFrZSBzdXJlIHRoZSBjYW4gcmVjZWl2ZSBtYWlscyBmcm9tIGV4dGVybmFsIHNlbmRlcnMuIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiSW4gY2FzZSB0aGF0IHRoZSBFbWFpbCBEaXN0cmlidXRpb24gTGlzdCBoYXMgbm90IGVuYWJsZWQgdG8gcmVjZWl2ZSBleHRlcm5hbCBlbWFpbHMsIHlvdSBzaG91bGQgY3JlYXRlIGEgdGlja2V0IGluIFNlcnZpY2UgTm93IHRvIGVuYWJsZSBpdCBiZWZvcmUuIFBsZWFzZSByZWZlciB0byAgIgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAic3Ryb25nIiwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIi9hcHBsaWNhdGlvbi1zZWN1cml0eS9jZXJ0aWZpY2F0ZS1yZXF1ZXN0cy9FeHRlcm5hbF9lbWFpbHMuaHRtbCIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICJDcmVhdGUgYSBSZXF1ZXN0IHRvIGVuYWJsZSB0byByZWNlaXZlIGVtYWlscyBmcm9tIGV4dGVybmFsIHNlbmRlcnMiCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoJ1ByZXNzICJPcmRlciBOb3ciOicpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWFnZXMvU05DX1JlcXVlc3RfMy5wbmciKSwKICAgICAgICAgICAgICAgICAgICBhbHQ6ICJTTkNfUmVxdWVzdF8zIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoIk5vdGUiKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIjogVGhlIFNlcnZpY2Utbm93IHN1cHBvcnQgZ3JvdXAgaGFzIHRvIGJlIGEgdmFsaWQgc3VwcG9ydCBncm91cCBhdCB0aGlzIGV4YW1wbGUgSSBoYWQgY2hhc3NlZCBhIGdlbmVyaWMgc3VwcG9ydCBncm91cCBidXQgd29uJ3QgdXNlIGl0IGFzIGl0IGlzIG93bmVkIGJ5IGFub3RoZXIgRmxleCB0ZWFtLiBJZiB5b3UgZG8gbm90IGhhdmUgb25lIHN1cHBvcnQgZ3JvdXAgeW91IHdpbGwgbmVlZCB0byBnZW5lcmF0ZSBvbmUgYmVmb3JlIGNyZWF0ZSB0aGlzIHRpY2tldC4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiWW91ciByZXF1ZXN0IGhhcyBiZWVuIGNyZWF0ZWQgYW5kIHN1Ym1pdHRlZCBmb3IgYXBwcm92YWwgb25jZSB0aGUgcmVxdWVzdCBnZXRzIGFwcHJvdmVkIHRoZSBTT0MncyB0ZWFtIHdpbGwgd29yayBvbiBjcmVhdGUgdGhlIENlcnRpZmljYXRlLiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KCJXaGlsZSB0aGUgcmVxdWVzdCBnZXRzIGFwcHJvdmVkIHlvdSBoYXZlIHRvIHBsYWNlIGEgIiksCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJbY29tb2RvXSIpXSksCiAgICAgICAgICAgIF92bS5fdigiIHJlcXVlc3QiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiVG8gY3JlYXRlIHRoaXMgcmVxdWVzdCBwbGVhc2UgZm9sbG93ICIpLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInN0cm9uZyIsCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICB0bzoKICAgICAgICAgICAgICAgICAgICAgICAgICAiL2FwcGxpY2F0aW9uLXNlY3VyaXR5L2NlcnRpZmljYXRlLXJlcXVlc3RzL2NvbW9kby1yZXEuaHRtbCIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNvbW9kbyBSZXF1ZXN0IildCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBkb2N1bWVudC4iKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}