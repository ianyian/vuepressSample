{"remainingRequest":"C:\\GitRepos\\testing1234\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\GitRepos\\testing1234\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\GitRepos\\testing1234\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\GitRepos\\testing1234\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!C:\\GitRepos\\testing1234\\docs\\best-practices\\markdown-guidelines\\README.md?vue&type=template&id=76ac1067&","dependencies":[{"path":"C:\\GitRepos\\testing1234\\docs\\best-practices\\markdown-guidelines\\README.md","mtime":1624025589191},{"path":"C:\\GitRepos\\testing1234\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitRepos\\testing1234\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\GitRepos\\testing1234\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitRepos\\testing1234\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\GitRepos\\testing1234\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}